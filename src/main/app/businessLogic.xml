<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd">
    <batch:job name="migrateContactsBatch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
			<sfdc:query config-ref="SalesforceA" query="SELECT Description,Email,FirstName,LastModifiedDate,LastName,MailingCountry,Title, Account.Id, Account.Name, Account.AccountNumber, Account.Description, Account.Industry, Account.NumberOfEmployees
FROM Contact WHERE (MailingCountry = 'US' AND Email &lt;&gt; '') ORDER BY Email ASC" doc:name="query Contacts from Salesforce instance A" fetchSize="${page.size}"/>
        </batch:input> 
        <batch:process-records>
            <batch:step name="getContactInBStep">
                <enricher source="#[payload]" target="#[recordVars['contactInB']]" doc:name="store result in record var 'contactInB'">
                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, LastModifiedDate FROM Contact WHERE Email = '#[payload['Email']]'" doc:name="query contact in Salesforce instance B"/>
                </enricher>
            </batch:step>
            <batch:step name="findOrCreateAccountInBStep" accept-expression="'syncAccount' == '${account.sync.policy}'">
                <flow-ref name="findOrCreateAccountFlow" doc:name="trigger findOrCreateAccountFlow"/>

            </batch:step>
            <batch:step name="setDummyAccountIdStep" accept-expression="'assignDummyAccount' == '${account.sync.policy}'">
                <expression-component doc:name="set AccountId"><![CDATA[payload['AccountId']= '${account.id.in.b}';]]></expression-component>
            </batch:step>
            <batch:step name="createContactsInBStep" accept-expression="!(payload is NullPayload)">
                <expression-component doc:name="prepare properties for upsert"><![CDATA[payload['Id'] = recordVars['contactInB'] is NullPayload ? null : recordVars['contactInB']['Id'];
payload.remove('type'); 
payload.remove('LastModifiedDate');
payload.remove('Account');]]></expression-component>
            	
                <batch:commit size="200" doc:name="Batch Commit">
					<sfdc:upsert config-ref="SalesforceB"  type="Contact" doc:name="upsert contacts in org B" externalIdFieldName="Id">
                        <sfdc:objects ref="#[payload]"/>
					</sfdc:upsert>
                </batch:commit>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            <flow-ref name="sendEmailLogResultFlow" doc:name="trigger sendEmailLogResultFlow"/>

        </batch:on-complete>
    </batch:job>
    <sub-flow name="findOrCreateAccountFlow" doc:name="findOrCreateAccountFlow">
        <choice doc:name="Choice">
            <when expression="#[payload['Account'] != null]">
                <enricher source="#[payload]" target="#[flowVars['accountInB']]" doc:name="store result in accountInB">
                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, Name FROM Account WHERE Name = '#[payload['Account']['Name']]'" doc:name="query Account in  Salesforce Instance B"/>
                </enricher>
                <choice doc:name="Choice">
                    <when expression="#[flowVars['accountInB'] is NullPayload]">
                        <flow-ref name="createAccountFlow" doc:name="trigger CreateAccountFlow"/>
                    </when>
                    <otherwise>
                        <enricher target="#[recordVars['idOfAccountInB']]" doc:name="store result in idOfAccountInB">
                            <expression-transformer expression="#[flowVars['accountInB']['Id']]" doc:name="get new account id"/>
                        </enricher>
                    </otherwise>
                </choice>
                <expression-component doc:name="set AccountId"><![CDATA[payload['AccountId']= recordVars['idOfAccountInB'];
]]></expression-component>
            </when>
            <otherwise>
                <logger message="There is no Account assigned to this contact. Doing nothing" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
    </sub-flow>
    <sub-flow name="createAccountFlow" doc:name="createAccountFlow">
        <enricher target="#[recordVars['idOfAccountInB']]" doc:name="store result in idOfAccountInB">
            <processor-chain doc:name="Processor Chain">
                <expression-component doc:name="remove unnecessary fields"><![CDATA[payload['Account'].remove('Id');
payload['Account'].put('NumberOfEmployees', payload['Account']['NumberOfEmployees'] == null ? 0 :  Integer.parseInt(payload['Account']['NumberOfEmployees']) );]]></expression-component>
                <set-payload value="#[ [payload['Account']]]" doc:name="Set Payload"/>
                <sfdc:create config-ref="SalesforceB" type="Account" doc:name="create Account in Salesforce Instance B">
                    <sfdc:objects ref="#[payload]"/>
                </sfdc:create>
                <expression-transformer expression="#[payload[0].getId()]" doc:name="get new account id"/>
            </processor-chain>
        </enricher>
    </sub-flow>
    <sub-flow name="sendEmailLogResultFlow" doc:name="sendEmailLogResultFlow">
        <scatter-gather doc:name="All">
            <processor-chain>
                <json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
                <logger message="Migration process has finished: #[payload]" level="INFO" doc:name="log 'Migration process has finished'"/>
            </processor-chain>
            <processor-chain>
                <json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
                <smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" connector-ref="gmailConnector" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" doc:name="send mail"/>
            </processor-chain>
        </scatter-gather>
    </sub-flow>
    <flow name="mainFlow" doc:name="mainFlow" processingStrategy="synchronous" doc:description="This flow is the entry point to the Anypoint Template  business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Anypoint Template  exposes to trigger it.

">
        <batch:execute name="migrateContactsBatch" doc:name="trigger migrateContactsBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="catch Exception and call defaultChoiceExceptionStrategy"/>
    </flow>
    
    
</mule>
